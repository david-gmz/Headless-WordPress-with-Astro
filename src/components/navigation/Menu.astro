---
import NavLinks from "./NavLinks.astro";
import Logo from "@components/ui/Logo.astro";
---

<div class="flex items-center justify-between h-16">
    <!-- Logo -->
    <div class="flex-shrink-0">
        <a
            href="/"
            class="flex items-center space-x-3 rtl:space-x-reverse"
            data-astro-reload>
            <Logo class="w-14 h-auto" />
            <span
                class="hidden md:inline-block self-center text-2xl font-semibold whitespace-nowrap site-tile"
                >Bambucleta Nomade</span
            >
        </a>
    </div>

    <!-- Desktop Navigation -->
    <nav class="hidden md:flex space-x-4">
        <NavLinks
            classes="text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white px-3 py-2 rounded-md font-medium"
        />
    </nav>

    <div class="flex items-center space-x-4">
        <!-- Theme Toggle -->
        <button
            id="theme-toggle"
            class="p-2 rounded-lg text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"
            aria-label="Toggle theme">
            <svg
                id="theme-toggle-dark-icon"
                class="hidden w-5 h-5"
                fill="currentColor"
                viewBox="0 0 20 20"
                xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
                ></path>
            </svg>
            <svg
                id="theme-toggle-light-icon"
                class="hidden w-5 h-5"
                fill="currentColor"
                viewBox="0 0 20 20"
                xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
                ></path>
            </svg>
        </button>

        <!-- Mobile Menu Button -->
        <button
            id="mobile-menu-button"
            class="md:hidden p-2 rounded-lg text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"
            aria-label="Open menu">
            <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg">
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
        </button>
    </div>
</div>

<!-- Mobile Navigation -->
<div id="mobile-menu" class="hidden md:hidden pb-4">
    <div class="flex flex-col space-y-2">
        <NavLinks
            classes="text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white px-3 py-2 rounded-md text-base font-medium"
        />
    </div>
</div>

<script is:inline>
    // Theme toggle functionality
    function handleThemeToggle() {
        const themeToggleDarkIcon = document.getElementById(
            "theme-toggle-dark-icon"
        );
        const themeToggleLightIcon = document.getElementById(
            "theme-toggle-light-icon"
        );

        themeToggleDarkIcon?.classList.toggle("hidden");
        themeToggleLightIcon?.classList.toggle("hidden");

        if (localStorage.getItem("color-theme")) {
            if (localStorage.getItem("color-theme") === "light") {
                document.documentElement.classList.add("dark");
                localStorage.setItem("color-theme", "dark");
            } else {
                document.documentElement.classList.remove("dark");
                localStorage.setItem("color-theme", "light");
            }
        } else {
            if (document.documentElement.classList.contains("dark")) {
                document.documentElement.classList.remove("dark");
                localStorage.setItem("color-theme", "light");
            } else {
                document.documentElement.classList.add("dark");
                localStorage.setItem("color-theme", "dark");
            }
        }
    }

    // Mobile menu functionality
    function handleMobileMenuToggle() {
        const mobileMenu = document.getElementById("mobile-menu");
        mobileMenu?.classList.toggle("hidden");
    }

    // Initialize theme
    function initTheme() {
        const themeToggleDarkIcon = document.getElementById(
            "theme-toggle-dark-icon"
        );
        const themeToggleLightIcon = document.getElementById(
            "theme-toggle-light-icon"
        );

        if (
            localStorage.getItem("color-theme") === "dark" ||
            (!("color-theme" in localStorage) &&
                window.matchMedia("(prefers-color-scheme: dark)").matches)
        ) {
            document.documentElement.classList.add("dark");
            themeToggleLightIcon?.classList.remove("hidden");
        } else {
            document.documentElement.classList.remove("dark");
            themeToggleDarkIcon?.classList.remove("hidden");
        }
    }

    // Initialize event listeners
    function setupEventListeners() {
        const themeToggle = document.getElementById("theme-toggle");
        const mobileMenuButton = document.getElementById("mobile-menu-button");

        themeToggle?.addEventListener("click", handleThemeToggle);
        mobileMenuButton?.addEventListener("click", handleMobileMenuToggle);
    }

    // Setup on initial page load
    document.addEventListener("DOMContentLoaded", () => {
        initTheme();
        setupEventListeners();
    });

    // Setup on View Transitions navigation
    document.addEventListener("astro:page-load", () => {
        initTheme();
        setupEventListeners();
    });

    // Immediate setup (needed for some browsers)
    initTheme();
    setupEventListeners();
</script>
